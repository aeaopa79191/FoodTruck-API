{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodtype","avgcost","geometry","coordinates","lat","long","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","status","remove","_id","review","newReview","title","text","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport {Router} from 'express';\nimport FoodTruck from '../model/foodtruck';\nimport Review from '../model/review';\nimport {authenticate} from '../middleware/authMiddleware';\n\nexport default({config,db}) =>{\n  let api = Router();\n\n  // '/v1/routes/add' - Create\n  api.post('/add',authenticate, (req,res) =>{\n    let newFoodTruck = new FoodTruck();\n    newFoodTruck.name = req.body.name;\n    newFoodTruck.foodtype = req.body.foodtype;\n    newFoodTruck.avgcost = req.body.avgcost;\n    newFoodTruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n    newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n\n    newFoodTruck.save(err =>{\n      if(err){\n        res.send(err);\n      }\n      res.json({message:'FoodTruck saved successfully'});\n    });\n  });\n\n  // '/v1/foodtruck' - Read\n\n  api.get('/', (req,res) =>{\n    FoodTruck.find({},(err,foodtrucks) =>{\n      if(err){\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n  //'v1/foodtruck/:id' -Read 1\n  api.get('/:id', (req,res)=>{\n    FoodTruck.findById(req.params.id,(err,foodtruck)=>{\n      if(err){\n        res.send(err);\n      }\n      res.json(foodtruck);\n    });\n  });\n\n  //retrieve all Food Trucks which serve a certain foodtype\n  //'v1/foodtruck/foodtype/:foodtypeâ€™\n  api.get('/foodtype/:foodtype', (req,res)=>{\n    FoodTruck.find({ foodtype: req.params.foodtype },(err,foodtrucks) => {\n      if(err){\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n\n\n  // '/v1/foodtruck/:id' - Update\n  api.put('/:id',authenticate, (req,res)=>{\n    FoodTruck.findById(req.params.id,(err,foodtruck)=>{\n      if(err){\n        res.send(err);\n      }\n      foodtruck.name = req.body.name;\n      foodtruck.foodtype = req.body.foodtype;\n      foodtruck.avgcost = req.body.avgcost;\n      foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n      foodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n      foodtruck.save(err =>{\n        if(err){\n          res.send(err);\n        }\n        res.json({message:\"FoodTruck info updated\"});\n      });\n    });\n  });\n\n// '/v1/foodtruck/:id' - Delete\napi.delete('/:id',authenticate,(req,res) =>{\n  FoodTruck.findById(req.params.id,(err,foodtruck)=>{\n    if(err){\n      res.status(500).send(err);\n      return;\n    }\n    if(foodtruck === null){\n      res.status(404).send(\"FoodTruck not found\");\n      return;\n    }\n    FoodTruck.remove({\n      _id: req.params.id\n    },(err, foodtruck)=>{\n      if(err){\n        res.send(err);\n        res.status(500).send(err);\n        return;\n      }\n      Review.remove({\n        foodtruck: req.params.id},(err,review)=>{\n          if(err){\n            res.send(err);\n          }\n          res.json({message:\"FoodTruck successfully removed!\"});\n      });\n    });\n  });\n});\n\n\n// add review for a specific foodtruckid\n// '/v1/foodtruck/reviews/add/:id'\napi.post('/reviews/add/:id', authenticate,(req, res) => {\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\n    if (err) {\n      res.send(err);\n    }\n    let newReview = new Review();\n\n    newReview.title = req.body.title;\n    newReview.text = req.body.text;\n    newReview.foodtruck = foodtruck._id;\n    newReview.save((err, review) => {\n      if (err) {\n        res.send(err);\n      }\n      foodtruck.reviews.push(newReview);\n      foodtruck.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({ message: 'Food truck review saved' });\n      });\n    });\n  });\n});\n\n// get reviews for a specific food truck id\n//'/v1/foodtruck/reviews/:id'\napi.get('/reviews/:id',(req,res) =>{\n  Review.find({foodtruck: req.params.id},(err,reviews)=>{\n    if(err){\n      res.send(err);\n    }\n    res.json(reviews)\n  })\n})\n\n  return api;\n}\n"]}